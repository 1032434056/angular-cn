include ../_util-fns

:marked
  We’ll test an Angular pipe in this chapter.

  在本章中，我们将测试一个Angular管道。

  An Angular pipe is a declarative way in HTML to transform some input into some displayable output.

  Angular管道一种以声明的方式，在HTML中把某些输入转换成易于显示的输出。

  We don't have a pipe though, since in Tour of Heroes we didn't create any pipes. It uses a pipe though, the `uppercase` pipe that comes with Angular 2.

  我们还没有管道，因为在《英雄指南》中我们没有创建过任何管道。不过它用过一个来自Angular 2中的`uppercase`管道。

  We can make our own `my-uppercase` pipe that does exactly the same as the `uppercase` pipe and test that.

  我们可以做一个自己的`my-uppercase`管道并测试它，该管道的功能和`uppercase`管道完全相同。

  Since we're getting ready to write some code we want to test, let's take this opportunity to talk just a little bit about [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development). There's a lot written about this topic so we don't want to have an exhaustive description here, but rather a practical application.

  既然我们准备写一些待测试的代码，那就趁机讲一点关于[测试驱动开发(TDD)](https://en.wikipedia.org/wiki/Test-driven_development)的知识吧。
  关于这个主题已经有了大量的著述，我们这里也就不再全面描述它了，而只是针对一个实际的应用来讲。

  We already know *exactly* what we want the `uppercase` pipe to do. We could say our ...expectations... of it are very well defined.

  我们已经*确切的*知道`uppercase`应该做什么。可以说，我们对它的……预期行为……是有良好定义的(well defined)。

  We always use expectations our expectations to guide development, but sometimes it's hard to see the forest for the trees when we're right in the middle of coding. This is especially evident in larger tasks.

  我们总是使用自己的预期(Expectation)来指导开发，但是有时候，也很容易见木不见林，特别是我们的代码走到中途的时候。在大型任务中，这种情况尤为明显。

  So one thing we can do is put those expectations down as cold hard test code. We were going to test things manually anyway, so doing it *before* we have even one line of code isn't going to hurt.

  我们所能做的就是把这些预期落实到冰冷的测试代码上。反正无论如何我们都会手动测试它们，那么在连一行代码都没有的时候写点测试代码也不会带来什么问题。

  Worst thing that can happen is have that test fail, but on the way to fixing it we'll end up creating our pipe. So in a sense, the failing test will *tell you what it wants* to pass.

  最坏的结果也只是测试会失败，但在我们创建管道的过程中，会逐渐修复它。于是，在这个意义上，失败的测试会*告诉我们它要的是什么*。

  We're just putting down expectations, nothing more. If we were to put them down on paper, they would look like this:

  我们只要写下这些预期就行了，不用多。如果把它们写在纸上，大概是这样的：

  ```
    MyUppercasePipe
      transforms "abc" to "ABC"
      transforms "abc def" to "ABC DEF"
      leaves "ABC DEF" unchanged
  ```

  All we need to know to put down our expectations as code is how a pipe class looks like from the outside. From the [pipe developer guide](pipes#custom-pipes) we know that a pipe implements a `transform` method.

  我们需要知道的一切就是：把我们的预期用代码的形式写下来，就意味着这个管道类从外界看起来应该是什么样的。
  从[管道开发指南](pipes#custom-pipes)中，我们知道管道实现了一个`transform`方法。

  Putting it down as Jasmine expectations, they would look something like this:

  把它写成Jasmine中的“预期”，它们看起来是这样的：

+makeExample('testing/ts/app/my-uppercase.pipe.spec.ts', 'expectations')

:marked
  In this chapter we will:

  在本章中，我们将：

  - create a test before creating a class

  - 在创建类之前创建一个测试

  - load multiple test files in our test harness, using system.js

  - 使用SystemJS把多个测试文件加载到我们的测试挽具中

  - add the Angular 2 library to our test harness

  - 往我们的测试挽具中添加Angular 2库

  - watch the new test fail, and fix it

  - 监视新测试，如果失败，就修复它

.callout.is-helpful
  header Prior Knowledge

  header 准备知识

  :marked
    The Unit Testing chapters build upon each other. We recommend reading them in order.
    We're also assuming that you're already comfortable with basic Angular 2 concepts and the tools
    we introduced in the [QuickStart](../quickstart.html) and
    the [Tour of Heroes](../tutorial/) tutorial
    such as <code>npm</code>, <code>gulp</code>, and <code>live-server</code>.

    这一章单元测试是在其它章节的基础上写的。我们建议你按顺序阅读它们。同时，我们假设你已经对Angular 2的原理、[“快速起步”](../quickstart.html)和
    [英雄指南](../tutorial)中介绍的<code>npm</code>、<code>gulp</code>和<code>live-server</code>等工具都已经有所了解。

:marked
  ## Add another spec file

  ## 添加另一个规约文件

  **Create** a `my-uppercase.pipe.spec.ts` in `app/`.

  在`app/`中创建一个`my-uppercase.pipe.spec.ts`文件。

  **Stop and restart the TypeScript compiler** to ensure we compile the new file.

  **停止并重新启动TypeScript编译器**以确保我们能编译这个新文件。

  **Add** the following lines of rather obvious Jasmine test code.

  **添加**下面这些直白的Jasmine测试代码。

+makeExample('testing/ts/app/my-uppercase.pipe.spec.ts', 'base-pipe-spec', 'app/my-uppercase.pipe.spec.ts')

:marked
  Note that each test is short (one line in our case).
  It has a clear label that accurately describes the test. And it makes exactly one expectation.

  注意，每个测试都很短(在这里是一行)。
  它有一个清晰的用来精确描述本测试的标签，并且只表达一条期待。

  Anyone can read these tests and understand quickly what the test does and what the pipe does.
  If one of the tests fails, we know which expected behavior is no longer true.
  We’ll have little trouble maintaining these tests and adding more like them as we encounter new conditions to explore.

  任何人都可以读这些测试，并快速理解这个测试是做什么的，以及这个管道是做什么的。
  如果这些测试之一失败了，我们就知道它所期待的行为出问题了。
  要维护这些测试我们会遇到一些小麻烦，并且如果我们遇到了需要探索的新条件，还得添加更多类似的测试。

  That’s the way we like our tests!

  但这就是我们关爱这些测试的方式！

  ## Add this spec to `unit-tests.html`

  ## 把规约添加到`unit-tests.html`中

  Now let’s wire our new spec file into the HTML test harness.

  现在，让我们把这个新的规约文件放进这个HTML测试挽具中。

  Open `unit-tests.html`. Find `System.import('app/hero.spec')`.

  打开`unit-tests.html`。查找`System.import('app/hero.spec')`。

  Hmm. We can’t just add `System.import('app/my-uppercase.pipe.spec')`.

  恩……我们不能只添加`System.import('app/my-uppercase.pipe.spec')`。

  The first `System.import` returns a promise as does this second import.
  We can’t run any of the Jasmine tests until **both imports are finished**.

  第一个`System.import`返回一个承诺(promise)，第二个也一样。
  直到**这两个`import`都执行完**，Jasmine的测试才会开始运行。

  Fortunately, we can create a new `Promise` that wraps both import promises and waits
  for both to finish loading.

  幸运的是，我们可以创建一个新的`Promise`来包装这两个`import`语句返回的承诺，并等它们两个加载结束。

+makeExample('testing/ts/unit-tests-4.html', 'promise-all')(format=".")

:marked
  We have a pattern for adding new tests.

  这下我们有了一种添加新测试的模式。

  In future, when we add a new spec, we add another `System.import('app/some.spec')` to
  the array argument passed to `Promise.all`.

  将来我们再添加新的规约时，只要往传给`Promise.all`的数组参数中添加另一个`System.import('app/some.spec')`语句就可以了。

  Try it. The browser should refresh and show the following in the console:

  试一下。浏览器会刷新，并在控制台中显示如下内容：

code-example(format="" language="html" escape="html").
  GET http://localhost:8080/app/my-uppercase.pipe.js 404 (Not Found)

:marked
  Our test failed, as expected. We're importing something that doesn't exist and our test fails saying that. All is going according to plan.

  如预期的一样，测试失败了。我们在导入一些不存在的东西，就像测试的失败信息中所说的那样。一切都在按照计划发生。

:marked
  ## The pipe, if you please

  ## 管道，请上场

  The test is asking for a pipe, and we shall deliver.

  这个测试需要一个管道，我们这就给它。

  **Create** a `my-uppercase.pipe.ts` in `app/`.

  在`app/`中**创建**一个`my-uppercase.pipe.ts`文件。

  **Stop and restart the TypeScript compiler** to ensure we compile the new file.

  **停止并重启TypeScript编译器**，以确保我们能编译这个新文件。

  **Add** a basic pipe that doesn't do anything. We know how to make strings uppercase, but we since we're letting the test take the lead let's wait for it to tell us what's next. Maybe it'll surprise us.

  **添加**一个什么也不做的基本管道。我们知道该如何让字符串变大写，但由于要让测试先行，所以就让测试来告诉我们下一步做什么。也许它会带给我们一些惊喜。

+makeExample('testing/ts/app/my-uppercase.pipe.1.ts', null, 'app/my-uppercase.pipe.ts')

:marked
  Reload our test page and...

  刷新我们的测试页面，并且……

code-example(format="" language="html" escape="html").
  GET http://localhost:8080/angular2/core 404 (Not Found)

:marked
  ## The Angular library, if you please

  ## Angular库，请上场

  Looking back at `unit-tests.html` we realize that we have not loaded the Angular library.
  Yet we were able to load and test the application’s `Hero` interface.

  往回看`unit-tests.html`，我们认识到自己还没加载过Angular库。
  但是我们可以加载和测试应用中`Hero`接口的测试了。

  **We were lucky!**  The `Hero` interface has no dependence on Angular.
  If it had depended on Angular, we’d still be staring at the Jasmine “big-time fail” screen:

  **那是我们幸运！**`Hero`接口并不依赖Angular。
  如果它依赖于Angular，我们就得面对Jasmine的“大败局”界面了（译注：因为在运行任何测试之前就出现了错误，所以没有任何测试会执行，参见[运行，并失败](run-and-fail)）：

figure.image-display
  img(src='/resources/images/devguide/testing-an-angular-pipe/big-time-fail-screen.png'
      alt="Jasmine's' big time fail screen")

:marked
  We are writing an Angular application after all and
  we were going to need Angular sooner or later. That time has come.

  毕竟我们写的是Angular程序，迟早会需要Angular登场。对，就是现在！

  `MyUppercasePipe` depends on Angular as is clear in the first few lines:

  在开始的寥寥几行中，`MyUppercasePipe`对Angular的依赖就清晰可见了：

+makeExample('testing/ts/app/my-uppercase.pipe.ts', 'depends-on-angular')(format=".")

:marked
  **Open** `unit-tests.html`

  **打开**`unit-tests.html`

  **Find** the `<!-- #1. add the system.js library -->` comment.

  **查找**`<!-- #1. add the system.js library -->`注释。

  **Replace** the scripts tags beneath it with the all the needed angular scripts:

  把它下方的`script`标记**替换成**这些所需的Angular脚本：

+makeExample('testing/ts/unit-tests-5.html', 'import-angular')(format=".")

:marked
  We should now be ready to see our 3 expectations fail when reloading our test page.

  当刷新测试页面时，我们会期待看到三条期待都落空了。

figure.image-display
  img(src='/resources/images/devguide/testing-an-angular-pipe/two-failures.png' alt="2 failed tests")

:marked
  ## Uppercase, if you please

  ## Uppercase，请上场

  The first two tests that passed were our old `hero` interface tests, so it makes sense that those passed. Of our three new expectations, one still passed though.

  前两个通过的测试是我们以前的`hero`接口测试，所以它们的通过是有意义的。当然，这三条新的期待中，有一条还是通过了。

  ```
    MyUppercasePipe
      transforms "abc" to "ABC"
      transforms "abc def" to "ABC DEF"
      leaves "ABC DEF" unchanged
  ```

  Ah but of course! Our simple pipe doesn't transform the input at all, and the third test expected
  input to not be changed.

  啊，当然！我们这个简单的管道还完全没有转换输入，而第三条测试期待的是输入内容没变化。

  All we have to do now is actually transform text to uppercase in our pipe.

  我们现在要做的一切，实际上是在我们的管道中把这些文本转换成大写。

+makeExample('testing/ts/app/my-uppercase.pipe.ts', 'uppercase')(format=".")

:marked
  Are we done now?

  现在，我们完成了吗？

figure.image-display
  img(src='/resources/images/devguide/testing-an-angular-pipe/zero-failures.png' alt="0 failed tests")

:marked
  The glorious green is back with us again!

  我们光荣的绿条儿又回来了！

  We tried a bit of test driven development and it seems to have guided us to success.

  我们尝试了一点点测试驱动开发，看起来它确实指导我们走向了成功。

  But it's not always feasible. For instance, sometimes we need to write tests for existing functionality, like what we're about to do with the rest of Tour of Heroes.

  但这也并不总是可行的。比如，有时我们需要为现有功能写测试，就像我们即将对《英雄指南》的其余部分所做的那样。

  If we are writing new code though, writing tests might just be what we need to help us track our progress and keep the end result in sight at all times.

  如果我们正在写新代码，写测试可以帮助我们追踪进度和保持最终结果全程可见。

:marked
  ## What’s Next?

  ## 接下来呢？

  Now we can test parts of our application that we *load* asynchronously with system.js.

  现在，我们可以测试应用程序中的各个部分，我们可以用system.js来异步*加载*它们。

  What about testing parts that *are themselves asynchronous*?

  如果这些要测试的部分*本身就是异步的*呢？

  Let's test a service with a public asynchronous method that fetches heroes from a remote server.

  我们来测试一个带有异步方法的服务，它会从远端服务器中获取英雄列表。
