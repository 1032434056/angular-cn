block includes
  include ../_util-fns

:marked
  The Angular documentation is a living document with continuous improvements.
  This log calls attention to recent significant changes.

  我们将持续不断的更新和改进Angular文档。本日志记录了近期最重要的变更。

  ## NEW: Samples re-structured with `src/` folder (2017-02-02)
  All documentation samples have been realigned with the default folder structure of the angular-cli.
  That's a step along the road to basing our sample in the angular-cli.
  But it's also good in its own right. 
  It helps clearly separate app code from setup and configuration files.

  We've updated all samples with an `src/` folder at the project root.
  The former `app/` folder moves under `src/`. 
  Read about moving your existing project to this structure in 
  <a href="https://github.com/angular/quickstart#updating-to-a-newer-version-of-the-quickstart-repo" target="_blank" target="Migrating samples/quickstart app to the src folder">
  the QuickStart repo update instructions</a>.

  Notably:
  * `app/main.ts` moved to `src/main.ts`.
  * `app/` moved to `src/app/`.
  * `index.html`, `styles.css` and `tsconfig.json` moved inside `src/`.
  * `systemjs.config.js` now imports `main.js` instead of `app`.
  * Added `lite-server` configuration (`bs-config.json`) to serve `src/`.

  ## NEW: Reactive Forms guide (2017-01-31)
  The new [**Reactive Forms**](reactive-forms.html) guide explains how and why to build a "reactive form".
  "Reactive Forms" are the code-based counterpart to the declarative "Template Driven" forms approach
  introduced in the [Forms](forms.html) guide.
  Check it out before you decide how to add forms to your app. 
  Remember also that you can use both techniques in the same app, 
  choosing the approach that best fits each scenario.

  ## NEW: Deployment guide (2017-01-30)
  The new [Deployment](deployment.html) guide describes techniques for putting your application on a server.
  It includes important advice on optimizing for production.

  ## Hierarchical Dependency Injection: refreshed (2017-01-13)
  [Hierarchical Dependency Injection](hierarchical-dependency-injection.html) guide significantly revised.
  Closes issue #3086
  Revised samples are more clear and cover all topics discussed

  ## Miscellaneous (2017-01-05)
  * [Setup](setup.html) guide: 
  added (optional) instructions on how to remove _non-essential_ files. 
  * No longer consolidate RxJS operator imports in `rxjs-extensions` file; each file should import what it needs.
  * All samples prepend template/style URLS URLs w/ `./` ... and so should you.
  * [Style Guide](style-guide.html): copy edits and revised rules.

  ## Router: more detail (2016-12-21)
  Added more information to the [Router](router.html) guide 
  including sections named outlets, wildcard routes, and preload strategies.

  ## Http: how to set default request headers (and other request options) (2016-12-14)
  Added section on how to set default request headers (and other request options) to 
  [Http](server-communication.html#override-default-request-options) guide.

  ## Testing: added component test plunkers (2016-12-02)
  Added two plunkers that each test _one simple component_ so you can write a component test plunker of your own: <live-example name="setup" plnkr="quickstart-specs">one</live-example> for the QuickStart seed's `AppComponent` and <live-example name="testing" plnkr="banner-specs">another</live-example> for the Testing guide's `BannerComponent`. 
  Linked to these plunkers in [Testing](testing.html#live-examples) and [Setup anatomy](setup-systemjs-anatomy) guides.

  ## Internationalization: pluralization and _select_ (2016-11-30)
  The [Internationalization (i18n)](i18n.html) guide explains how to handle pluralization and
  translation of alternative texts with `select`.
  The sample demonstrates these features too.

  ## Testing: karma file updates (2016-11-30)
  * karma.config + karma-test-shim can handle multiple spec source paths;
  see quickstart issue: [angular/quickstart#294](https://github.com/angular/quickstart/issues/294)
  * Displays Jasmine Runner output in the karma-launched browser

  ## QuickStart Rewrite (2016-11-18)

  ## 全新《快速起步》 (2016-11-18)

  The QuickStart is completely rewritten so that it actually is quick.
  It references a minimal "Hello Angular" app running in Plunker.
  The new [Setup](setup.html) page tells you how to install a local development environment
  by downloading (or cloning) the QuickStart github repository.
  You are no longer asked to copy-and-paste code into setup files that were not explained anyway.

  《快速起步》被重新编写，变得更加快速。
  它使用了在 Plunker 中运行的最小化的 “Hello Angular” 应用。
  新添加的[搭建本地开发环境](setup.html)页面解释了如何通过下载或者克隆 QuickStart github 库来安装本地开发环境。
  你将不再需要拷贝粘贴代码到一些并没有对其解释的配置文件中。

  ## Sync with Angular v.2.2.0 (2016-11-14)

  ## 与Angular v.2.2.0同步(2016-11-14)

  Docs and code samples updated and tested with Angular v.2.2.0

  使用Angular v.2.2.0更新和测试所有文档和代码例子。

  ## UPDATE: NgUpgrade Guide for the AOT friendly _upgrade/static_ module (2016-11-14)

  ## 更新：用于AoT的_upgrade/static_模块NgUpgrade指南 (2016-11-14)

  The updated [NgUpgrade Guide](upgrade.html) guide covers the
  new AOT friendly `upgrade/static` module
  released in v.2.2.0, which is the recommended
  facility for migrating from AngularJS to Angular.
  The documentation for the version prior to v.2.2.0 has been removed.

  更新的[NgUpgrade指南](upgrade.html)覆盖在v.2.2.0发布的AoT`upgrade/static`模块，
  是从AngularJS升级至Angular的推荐工具。
  删除早于v.2.2.0版本的文档。

  ## ES6  described in "TypeScript to JavaScript" (2016-11-14)

  ## 在"从TypeScript到JavaScript"增加ES6的描述 (2016-11-14)

  The updated "[TypeScript to JavaScript](../cookbook/ts-to-js.html)" cookbook
  now explains how to write apps in ES6/7

  更新了"[从TypeScript到JavaScript](../cookbook/ts-to-js.html)"烹饪宝典，解释如何使用ES6/7编写应用

  by translating the common idioms in the TypeScript documentation examples
  (and elsewhere on the web) to ES6/7 and ES5.

  将TypeScript文档示例中（以及网站其它地方）的习惯用法翻译成ES6/7和ES5。

  ## Sync with Angular v.2.1.1 (2016-10-21)

  ## 与Angular v.2.1.1 同步(2016-10-21)

  Docs and code samples updated and tested with Angular v.2.1.0

  使用Angular v.2.1.1更新和测试所有文档和代码例子。

  ## npm _@types_ packages replace _typings_ (2016-10-20)

  ## 使用npm的_@types_包替换_typings_ (2016-10-20)

  Documentation samples now get TypeScript type information for 3rd party libraries
  from npm `@types` packages rather than with the _typings_ tooling.
  The `typings.json` file is gone.

  文档例子现在从npm的`@types`第三方库获取TypeScript类型信息，不再使用_typings_。
  删除`typings.json`文件。

  The "[AngularJS Upgrade](upgrade.html)" guide reflects this change.
  The `package.json` installs `@types/angular` and several `@types/angular-...`
  packages in support of upgrade; these are not needed for pure Angular development.

  "[从1.x升级](upgrade.html)"指南反映了这个变化。
  `package.json`安装`@types/angular`和一些`@types/angular-...`包来支持升级。它们在纯Angular开发中是不需要的。

  ## "Template Syntax" explains two-way data binding syntax (2016-10-20)

  ## "模板语法"添加了双向数据绑定语法的解释(2016-10-20)

  Demonstrates how to two-way data bind to a custom Angular component and
  re-explains `[(ngModel)]` in terms of the basic `[()]` syntax.

  展示了如何在自定义Angular组件中双向数据绑定，用基础`[()]`重新解释`[(ngModel)]`。

  ## BREAKING CHANGE: `in-memory-web-api` (v.0.1.11) delivered as esm umd (2016-10-19)

  ## 破坏性变化：`in-memory-web-api` (v.0.1.11) 以esm umd的形式发布 (2016-10-19)

  This change supports ES6 developers and aligns better with typical Angular libraries.
  It does not affect the module's API but it does affect how you load and import it.
  See the <a href="https://github.com/angular/in-memory-web-api/blob/master/CHANGELOG.md#0113-2016-10-20" target="_blank">change note</a>
  in the `in-memory-web-api` repo.

  这个变化支持ES6开发者，并与典型的Angular库看齐。
  它不会影响模块的API，但是它改变了加载和导入它的方式。
  参见`in-memory-web-api`库的<a href="https://github.com/angular/in-memory-web-api/blob/master/CHANGELOG.md#0113-2016-10-20" target="_blank">变更记录</a>。

  ## "Router" _preload_ syntax and _:enter_/_:leave_ animations (2016-10-19)

  ## "路由器"_预加载_语法和_:enter_/_:leave_动画(2016-10-19)

  The router can lazily _preload_ modules _after_ the app starts and
  _before_ the user navigates to them for improved perceived performance.

  路由器可以在应用启动_之后_和用户导航到惰性加载模块_之前_，预先加载惰性模块，以增强性能。

  New `:enter` and `:leave` aliases make animation more natural.

  新`:enter`和`:leave`语法，让动画更加自然。

  ## Sync with Angular v.2.1.0 (2016-10-12)

  ## 与Angular v.2.1.0同步(2016-10-12)

  Docs and code samples updated and tested with Angular v.2.1.0

  使用Angular v.2.1.0更新和测试所有文档和代码例子。

  ## NEW "Ahead of time (AOT) Compilation" cookbook (2016-10-11)

  ## 添加了新的“预编译(AoT)"烹饪书(2016-10-11)

  The NEW [Ahead of time (AOT) Compilation](../cookbook/aot-compiler.html) cookbook
  explains what AOT compilation is and why you'd want it.
  It demonstrates the basics with a QuickStart app
  followed by the more advanced considerations of compiling and bundling the Tour of Heroes.

  全新[预编译(AoT)](../cookbook/aot-compiler.html)烹饪书介绍了什么是AoT编译和为何你需要它。
  它以**快速起步**应用程序开始讲解，接着介绍了编译和构建**英雄指南**的更高级的注意事项。

  ## Sync with Angular v.2.0.2 (2016-10-6)

  ## 与Angular v.2.0.2同步 (2016-10-6)

  Docs and code samples updated and tested with Angular v.2.0.2

  使用Angular v.2.0.2更新和测试所有文档和代码例子。

  ## "Routing and Navigation" guide with the _Router Module_ (2016-10-5)

  ## 在“路由和导航”向导中添加**路由模块** (2016-10-5)

  The [Routing and Navigation](router.html) guide now locates route configuration
  in a _Routing Module_. 
  The _Routing Module_ replaces the previous _routing object_ involving the `ModuleWithProviders`.

  [Routing and Navigation](router.html)现在在**路由模块**中设置路由配置。
  **路由模块**替换之前的**路由对象**，使用了`ModuleWithProviders`。

  [Routing and Navigation](router.html)

  [路由与导航](router.html)

  All guided samples with routing use the _Routing Module_ and prose content has been updated,
  most conspicuously in the 
  [NgModule](ngmodule.html) guide and [NgModule FAQ](../cookbook/ngmodule-faq.html) cookbook.

  所有使用路由的例子都使用**路由模块**，相关内容也被更新。更新最多的是[Angular模块（NgModule）](ngmodule.html)章和[Angular模块常见问题](../cookbook/ngmodule-faq.html)烹饪书。

  ## New "Internationalization" Cookbook (2016-09-30)

  ## 全新“国际化”烹饪书(2016-09-30)

  Added a new [Internationalization (i18n)](../cookbook/i18n.html) cookbook that shows how
  to use Angular "i18n" facilities to translate template text into multiple languages.

  添加了新的[国际化(i18n)](../cookbook/i18n.html)烹饪书，展示了如何使用Angular的“i18n”工具来讲模板文本翻译到多种语言。

  ## "angular-in-memory-web-api" package rename (2016-09-27)

  ## 重命名“angular-in-memory-web-api”包(2016-09-27)

  Many samples use the `angular-in-memory-web-api` to simulate a remote server.
  This library is also useful to you during early development before you have a server to talk to.

  许多例子使用了`angular-in-memory-web-api`来模拟远程服务器。
  这个库在你拥有服务器之前的早期开发阶段也很有用。

  The package name was changed from "angular2-in-memory-web-api" which is still frozen-in-time on npm.
  The new "angular-in-memory-web-api" has new features. 
  <a href="https://github.com/angular/in-memory-web-api/blob/master/README.md" target="_blank">Read about them on github</a>.

  这个包的名字从“angular2-in-memory-web-api”（仍然有效，但不再更新了）重新命名了。
  新的“angular-in-memory-web-api”有新的功能。
  <a href="https://github.com/angular/in-memory-web-api/blob/master/README.md" target="_blank">到github获得更多详情</a>.

  ## "Style Guide" with _NgModules_ (2016-09-27)

  ## “风格指南”中添加了_NgModules_(2016-09-27)

  [StyleGuide](style-guide.html) explains our recommended conventions for Angular modules (NgModule).

  [StyleGuide](style-guide.html)解释了我们为Angular模块（NgModule）而推荐的约定。

  Barrels now are far less useful and have been removed from the style guide;
  they remain valuable but are not a matter of Angular style.
  We also relaxed the rule that discouraged use of the `@Component.host` property.

  现在，封装桶不再那么重要，风格指南已经移除了它们。
  它们仍然很有价值，但是它们与Angular风格无关。
  我们同时对**不推荐使用`@Component.host`属性**的规则有所放宽。

  ## _moduleId: module.id_ everywhere (2016-09-25)

  ## moduleId：到处添加module.id(2016-09-25)

  Sample components that get their templates or styles with `templateUrl` or `styleUrls`
  have been converted to _module-relative_ URLs.
  We added the `moduleId: module.id` property-and-value to their `@Component` metadata.

  在所有使用`templateUrl`或者`styleUrls`来获取模板或样式的例子组件都被转换为**相对模块**的URL。
  我们添加了`moduleId: module.id`到它们的`@Component`元数据。

  This change is a requirement for compilation with AOT compiler when the app loads
  modules with SystemJS as the samples currently do.

  当应用像例子当前使用的方法一样 - 使用SystemJS加载模块时，本更新是AoT编译器的前提条件。

  ## "Lifecycle Hooks" guide simplified (2016-09-24)

  ## 简化了“生命周期钩子”章(2016-09-24)

  The [Lifecycle Hooks](lifecycle-hooks.html) guide is shorter, simpler, and
  draws more attention to the order in which Angular calls the hooks.

  [生命周期钩子](lifecycle-hooks.html)章现在更加简短，并且对强调了Angular是以什么顺序来调用钩子方法的。
